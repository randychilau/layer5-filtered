<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml"/><link href="http://localhost:4000/" rel="alternate" type="text/html"/><updated>2018-06-09T22:05:02-05:00</updated><id>http://localhost:4000/</id><title type="html">Layer 5</title><subtitle>Characterizing and contrasting service meshes and related technologies.</subtitle><entry><title type="html">The Enterprise Path to Servcie Mesh</title><link href="http://localhost:4000/2018/06/08/hello-world/" rel="alternate" type="text/html" title="The Enterprise Path to Servcie Mesh"/><published>2018-06-08T16:15:05-05:00</published><updated>2018-06-08T16:15:05-05:00</updated><id>http://localhost:4000/2018/06/08/hello-world</id><content type="html" xml:base="http://localhost:4000/2018/06/08/hello-world/">As a technology leader, you have heard of service mesh architectures in context of microservices. This book will help answer common questions on service mesh architectures, through the lens of a large enterprise. A service mesh approach offers a lot of potential for creating robust and scalable applications, but also introduces new challenges. The book covers how to evaluate your organization’s readiness, the factors to consider when deciding upon which applications should be built from the ground up or converted with a new service mesh architecture, and offers a path of how you can get there. Three most important things readers will learn from report: What is a service mesh and why do I need one? What are the different service meshes and how do they contrast? Where services meshes layer in with other technologies. When and why should I adopt a service mesh? What are popular deployment models and why? What are practical steps to adopt a service mesh in my enterprise? How do I fit a service mesh into my existing infrastructure? {% highlight ruby %} def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. {% endhighlight %} Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/ As a technology leader, you have heard of service mesh architectures in context of microservices. This book will help answer common questions on service mesh architectures, through the lens of a large enterprise. A service mesh approach offers a lot of potential for creating robust and scalable applications, but also introduces new challenges. The book covers how to evaluate your organization’s readiness, the factors to consider when deciding upon which applications should be built from the ground up or converted with a new service mesh architecture, and offers a path of how you can get there. Three most important things readers will learn from report: What is a service mesh and why do I need one? What are the different service meshes and how do they contrast? Where services meshes layer in with other technologies. When and why should I adopt a service mesh? What are popular deployment models and why? What are practical steps to adopt a service mesh in my enterprise? How do I fit a service mesh into my existing infrastructure? {% highlight ruby %} def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. {% endhighlight %} Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/</content><author><name></name></author><summary type="html">As a technology leader, you have heard of service mesh architectures in context of microservices. This book will help answer common questions on service mesh architectures, through the lens of a large enterprise. A service mesh approach offers a lot of potential for creating robust and scalable applications, but also introduces new challenges. The book covers how to evaluate your organization’s readiness, the factors to consider when deciding upon which applications should be built from the ground up or converted with a new service mesh architecture, and offers a path of how you can get there.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/cube-sh-small.png"/></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/2017/12/04/welcome-to-material-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!"/><published>2017-12-04T15:15:05-06:00</published><updated>2017-12-04T15:15:05-06:00</updated><id>http://localhost:4000/2017/12/04/welcome-to-material-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/12/04/welcome-to-material-jekyll/">You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: {% highlight ruby %} def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. {% endhighlight %} Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/ You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: {% highlight ruby %} def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. {% endhighlight %} Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/twoscreen.jpg"/></entry></feed>